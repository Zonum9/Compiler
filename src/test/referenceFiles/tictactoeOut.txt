INCLUDE
STRING_LITERAL(minic-stdlib.h)
CHAR
IDENTIFIER(a11)
SC
CHAR
IDENTIFIER(a12)
SC
CHAR
IDENTIFIER(a13)
SC
CHAR
IDENTIFIER(a21)
SC
CHAR
IDENTIFIER(a22)
SC
CHAR
IDENTIFIER(a23)
SC
CHAR
IDENTIFIER(a31)
SC
CHAR
IDENTIFIER(a32)
SC
CHAR
IDENTIFIER(a33)
SC
CHAR
IDENTIFIER(empty)
SC
VOID
IDENTIFIER(reset)
LPAR
RPAR
LBRA
IDENTIFIER(a11)
ASSIGN
IDENTIFIER(empty)
SC
IDENTIFIER(a12)
ASSIGN
IDENTIFIER(empty)
SC
IDENTIFIER(a13)
ASSIGN
IDENTIFIER(empty)
SC
IDENTIFIER(a21)
ASSIGN
IDENTIFIER(empty)
SC
IDENTIFIER(a22)
ASSIGN
IDENTIFIER(empty)
SC
IDENTIFIER(a23)
ASSIGN
IDENTIFIER(empty)
SC
IDENTIFIER(a31)
ASSIGN
IDENTIFIER(empty)
SC
IDENTIFIER(a32)
ASSIGN
IDENTIFIER(empty)
SC
IDENTIFIER(a33)
ASSIGN
IDENTIFIER(empty)
SC
RBRA
INT
IDENTIFIER(full)
LPAR
RPAR
LBRA
INT
IDENTIFIER(n)
SC
IDENTIFIER(n)
ASSIGN
INT_LITERAL(0)
SC
IF
LPAR
IDENTIFIER(a11)
NE
IDENTIFIER(empty)
RPAR
IDENTIFIER(n)
ASSIGN
IDENTIFIER(n)
PLUS
INT_LITERAL(1)
SC
IF
LPAR
IDENTIFIER(a21)
NE
IDENTIFIER(empty)
RPAR
IDENTIFIER(n)
ASSIGN
IDENTIFIER(n)
PLUS
INT_LITERAL(1)
SC
IF
LPAR
IDENTIFIER(a31)
NE
IDENTIFIER(empty)
RPAR
IDENTIFIER(n)
ASSIGN
IDENTIFIER(n)
PLUS
INT_LITERAL(1)
SC
IF
LPAR
IDENTIFIER(a12)
NE
IDENTIFIER(empty)
RPAR
IDENTIFIER(n)
ASSIGN
IDENTIFIER(n)
PLUS
INT_LITERAL(1)
SC
IF
LPAR
IDENTIFIER(a22)
NE
IDENTIFIER(empty)
RPAR
IDENTIFIER(n)
ASSIGN
IDENTIFIER(n)
PLUS
INT_LITERAL(1)
SC
IF
LPAR
IDENTIFIER(a32)
NE
IDENTIFIER(empty)
RPAR
IDENTIFIER(n)
ASSIGN
IDENTIFIER(n)
PLUS
INT_LITERAL(1)
SC
IF
LPAR
IDENTIFIER(a13)
NE
IDENTIFIER(empty)
RPAR
IDENTIFIER(n)
ASSIGN
IDENTIFIER(n)
PLUS
INT_LITERAL(1)
SC
IF
LPAR
IDENTIFIER(a23)
NE
IDENTIFIER(empty)
RPAR
IDENTIFIER(n)
ASSIGN
IDENTIFIER(n)
PLUS
INT_LITERAL(1)
SC
IF
LPAR
IDENTIFIER(a33)
NE
IDENTIFIER(empty)
RPAR
IDENTIFIER(n)
ASSIGN
IDENTIFIER(n)
PLUS
INT_LITERAL(1)
SC
IF
LPAR
IDENTIFIER(n)
EQ
INT_LITERAL(9)
RPAR
RETURN
INT_LITERAL(1)
SC
ELSE
RETURN
INT_LITERAL(0)
SC
RBRA
INT
IDENTIFIER(set)
LPAR
CHAR
IDENTIFIER(row)
COMMA
INT
IDENTIFIER(col)
COMMA
CHAR
IDENTIFIER(mark)
RPAR
LBRA
INT
IDENTIFIER(r)
SC
IDENTIFIER(r)
ASSIGN
INT_LITERAL(1)
SC
IF
LPAR
IDENTIFIER(row)
EQ
CHAR_LITERAL(a)
RPAR
LBRA
IF
LPAR
IDENTIFIER(col)
EQ
INT_LITERAL(1)
RPAR
LBRA
IF
LPAR
IDENTIFIER(a11)
EQ
IDENTIFIER(empty)
RPAR
IDENTIFIER(a11)
ASSIGN
IDENTIFIER(mark)
SC
ELSE
IDENTIFIER(r)
ASSIGN
MINUS
INT_LITERAL(1)
SC
RBRA
ELSE
LBRA
IF
LPAR
IDENTIFIER(col)
EQ
INT_LITERAL(2)
RPAR
LBRA
IF
LPAR
IDENTIFIER(a12)
EQ
IDENTIFIER(empty)
RPAR
IDENTIFIER(a12)
ASSIGN
IDENTIFIER(mark)
SC
ELSE
IDENTIFIER(r)
ASSIGN
MINUS
INT_LITERAL(1)
SC
RBRA
ELSE
LBRA
IF
LPAR
IDENTIFIER(col)
EQ
INT_LITERAL(3)
RPAR
LBRA
IF
LPAR
IDENTIFIER(a13)
EQ
IDENTIFIER(empty)
RPAR
IDENTIFIER(a13)
ASSIGN
IDENTIFIER(mark)
SC
ELSE
IDENTIFIER(r)
ASSIGN
MINUS
INT_LITERAL(1)
SC
RBRA
ELSE
LBRA
IDENTIFIER(r)
ASSIGN
INT_LITERAL(0)
SC
RBRA
RBRA
RBRA
RBRA
ELSE
LBRA
IF
LPAR
IDENTIFIER(row)
EQ
CHAR_LITERAL(b)
RPAR
LBRA
IF
LPAR
IDENTIFIER(col)
EQ
INT_LITERAL(1)
RPAR
LBRA
IF
LPAR
IDENTIFIER(a21)
EQ
IDENTIFIER(empty)
RPAR
IDENTIFIER(a21)
ASSIGN
IDENTIFIER(mark)
SC
ELSE
IDENTIFIER(r)
ASSIGN
MINUS
INT_LITERAL(1)
SC
RBRA
ELSE
LBRA
IF
LPAR
IDENTIFIER(col)
EQ
INT_LITERAL(2)
RPAR
LBRA
IF
LPAR
IDENTIFIER(a22)
EQ
IDENTIFIER(empty)
RPAR
IDENTIFIER(a22)
ASSIGN
IDENTIFIER(mark)
SC
ELSE
IDENTIFIER(r)
ASSIGN
MINUS
INT_LITERAL(1)
SC
RBRA
ELSE
LBRA
IF
LPAR
IDENTIFIER(col)
EQ
INT_LITERAL(3)
RPAR
LBRA
IF
LPAR
IDENTIFIER(a23)
EQ
IDENTIFIER(empty)
RPAR
IDENTIFIER(a23)
ASSIGN
IDENTIFIER(mark)
SC
ELSE
IDENTIFIER(r)
ASSIGN
MINUS
INT_LITERAL(1)
SC
RBRA
ELSE
LBRA
IDENTIFIER(r)
ASSIGN
INT_LITERAL(0)
SC
RBRA
RBRA
RBRA
RBRA
ELSE
LBRA
IF
LPAR
IDENTIFIER(row)
EQ
CHAR_LITERAL(c)
RPAR
LBRA
IF
LPAR
IDENTIFIER(col)
EQ
INT_LITERAL(1)
RPAR
LBRA
IF
LPAR
IDENTIFIER(a31)
EQ
IDENTIFIER(empty)
RPAR
IDENTIFIER(a31)
ASSIGN
IDENTIFIER(mark)
SC
ELSE
IDENTIFIER(r)
ASSIGN
MINUS
INT_LITERAL(1)
SC
RBRA
ELSE
LBRA
IF
LPAR
IDENTIFIER(col)
EQ
INT_LITERAL(2)
RPAR
LBRA
IF
LPAR
IDENTIFIER(a32)
EQ
IDENTIFIER(empty)
RPAR
IDENTIFIER(a32)
ASSIGN
IDENTIFIER(mark)
SC
ELSE
IDENTIFIER(r)
ASSIGN
MINUS
INT_LITERAL(1)
SC
RBRA
ELSE
LBRA
IF
LPAR
IDENTIFIER(col)
EQ
INT_LITERAL(3)
RPAR
LBRA
IF
LPAR
IDENTIFIER(a33)
EQ
IDENTIFIER(empty)
RPAR
IDENTIFIER(a33)
ASSIGN
IDENTIFIER(mark)
SC
ELSE
IDENTIFIER(r)
ASSIGN
MINUS
INT_LITERAL(1)
SC
RBRA
ELSE
LBRA
IDENTIFIER(r)
ASSIGN
INT_LITERAL(0)
SC
RBRA
RBRA
RBRA
RBRA
ELSE
LBRA
IDENTIFIER(r)
ASSIGN
INT_LITERAL(0)
SC
RBRA
RBRA
RBRA
RETURN
IDENTIFIER(r)
SC
RBRA
VOID
IDENTIFIER(printGame)
LPAR
RPAR
LBRA
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL(
)
RPAR
SC
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL(     1   2   3
)
RPAR
SC
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL(   +---+---+---+
)
RPAR
SC
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL(a  | )
RPAR
SC
IDENTIFIER(print_c)
LPAR
IDENTIFIER(a11)
RPAR
SC
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL( | )
RPAR
SC
IDENTIFIER(print_c)
LPAR
IDENTIFIER(a12)
RPAR
SC
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL( | )
RPAR
SC
IDENTIFIER(print_c)
LPAR
IDENTIFIER(a13)
RPAR
SC
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL( |
)
RPAR
SC
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL(   +---+---+---+
)
RPAR
SC
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL(b  | )
RPAR
SC
IDENTIFIER(print_c)
LPAR
IDENTIFIER(a21)
RPAR
SC
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL( | )
RPAR
SC
IDENTIFIER(print_c)
LPAR
IDENTIFIER(a22)
RPAR
SC
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL( | )
RPAR
SC
IDENTIFIER(print_c)
LPAR
IDENTIFIER(a23)
RPAR
SC
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL( |
)
RPAR
SC
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL(   +---+---+---+
)
RPAR
SC
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL(c  | )
RPAR
SC
IDENTIFIER(print_c)
LPAR
IDENTIFIER(a31)
RPAR
SC
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL( | )
RPAR
SC
IDENTIFIER(print_c)
LPAR
IDENTIFIER(a32)
RPAR
SC
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL( | )
RPAR
SC
IDENTIFIER(print_c)
LPAR
IDENTIFIER(a33)
RPAR
SC
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL( |
)
RPAR
SC
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL(   +---+---+---+
)
RPAR
SC
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL(
)
RPAR
SC
RBRA
VOID
IDENTIFIER(printWinner)
LPAR
INT
IDENTIFIER(player)
RPAR
LBRA
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL(Player )
RPAR
SC
IDENTIFIER(print_i)
LPAR
IDENTIFIER(player)
RPAR
SC
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL( has won!
)
RPAR
SC
RBRA
INT
IDENTIFIER(switchPlayer)
LPAR
INT
IDENTIFIER(currentPlayer)
RPAR
LBRA
IF
LPAR
IDENTIFIER(currentPlayer)
EQ
INT_LITERAL(1)
RPAR
RETURN
INT_LITERAL(2)
SC
ELSE
RETURN
INT_LITERAL(1)
SC
RBRA
CHAR
IDENTIFIER(get_mark)
LPAR
INT
IDENTIFIER(player)
RPAR
LBRA
IF
LPAR
IDENTIFIER(player)
EQ
INT_LITERAL(1)
RPAR
RETURN
CHAR_LITERAL(X)
SC
ELSE
RETURN
CHAR_LITERAL(O)
SC
RBRA
VOID
IDENTIFIER(selectmove)
LPAR
INT
IDENTIFIER(player)
RPAR
LBRA
CHAR
IDENTIFIER(row)
SC
INT
IDENTIFIER(col)
SC
INT
IDENTIFIER(selected)
SC
INT
IDENTIFIER(success)
SC
CHAR
IDENTIFIER(mark)
SC
IDENTIFIER(selected)
ASSIGN
INT_LITERAL(1)
SC
WHILE
LPAR
IDENTIFIER(selected)
RPAR
LBRA
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL(Player )
RPAR
SC
IDENTIFIER(print_i)
LPAR
IDENTIFIER(player)
RPAR
SC
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL( select move (e.g. a2)>)
RPAR
SC
IDENTIFIER(row)
ASSIGN
IDENTIFIER(read_c)
LPAR
RPAR
SC
IDENTIFIER(col)
ASSIGN
IDENTIFIER(read_i)
LPAR
RPAR
SC
IDENTIFIER(mark)
ASSIGN
IDENTIFIER(get_mark)
LPAR
IDENTIFIER(player)
RPAR
SC
IDENTIFIER(success)
ASSIGN
IDENTIFIER(set)
LPAR
IDENTIFIER(row)
COMMA
IDENTIFIER(col)
COMMA
IDENTIFIER(mark)
RPAR
SC
IF
LPAR
IDENTIFIER(success)
EQ
INT_LITERAL(0)
RPAR
LBRA
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL(That is not a valid move!
)
RPAR
SC
RBRA
ELSE
LBRA
IF
LPAR
IDENTIFIER(success)
EQ
MINUS
INT_LITERAL(1)
RPAR
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL(That move is not possible!
)
RPAR
SC
ELSE
IDENTIFIER(selected)
ASSIGN
INT_LITERAL(0)
SC
RBRA
RBRA
RBRA
INT
IDENTIFIER(won)
LPAR
CHAR
IDENTIFIER(mark)
RPAR
LBRA
INT
IDENTIFIER(r)
SC
IDENTIFIER(r)
ASSIGN
INT_LITERAL(0)
SC
IF
LPAR
IDENTIFIER(a11)
EQ
IDENTIFIER(mark)
RPAR
LBRA
IF
LPAR
IDENTIFIER(a21)
EQ
IDENTIFIER(mark)
RPAR
LBRA
IF
LPAR
IDENTIFIER(a31)
EQ
IDENTIFIER(mark)
RPAR
LBRA
IDENTIFIER(r)
ASSIGN
INT_LITERAL(1)
SC
RBRA
RBRA
ELSE
LBRA
IF
LPAR
IDENTIFIER(a22)
EQ
IDENTIFIER(mark)
RPAR
LBRA
IF
LPAR
IDENTIFIER(a33)
EQ
IDENTIFIER(mark)
RPAR
LBRA
IDENTIFIER(r)
ASSIGN
INT_LITERAL(1)
SC
RBRA
RBRA
ELSE
LBRA
IF
LPAR
IDENTIFIER(a12)
EQ
IDENTIFIER(mark)
RPAR
LBRA
IF
LPAR
IDENTIFIER(a13)
EQ
IDENTIFIER(mark)
RPAR
LBRA
IDENTIFIER(r)
ASSIGN
INT_LITERAL(1)
SC
RBRA
RBRA
RBRA
RBRA
RBRA
IF
LPAR
IDENTIFIER(a12)
EQ
IDENTIFIER(mark)
RPAR
LBRA
IF
LPAR
IDENTIFIER(a22)
EQ
IDENTIFIER(mark)
RPAR
LBRA
IF
LPAR
IDENTIFIER(a32)
EQ
IDENTIFIER(mark)
RPAR
LBRA
IDENTIFIER(r)
ASSIGN
INT_LITERAL(1)
SC
RBRA
RBRA
RBRA
IF
LPAR
IDENTIFIER(a13)
EQ
IDENTIFIER(mark)
RPAR
LBRA
IF
LPAR
IDENTIFIER(a23)
EQ
IDENTIFIER(mark)
RPAR
LBRA
IF
LPAR
IDENTIFIER(a33)
EQ
IDENTIFIER(mark)
RPAR
LBRA
IDENTIFIER(r)
ASSIGN
INT_LITERAL(1)
SC
RBRA
RBRA
ELSE
LBRA
IF
LPAR
IDENTIFIER(a22)
EQ
IDENTIFIER(mark)
RPAR
LBRA
IF
LPAR
IDENTIFIER(a31)
EQ
IDENTIFIER(mark)
RPAR
LBRA
IDENTIFIER(r)
ASSIGN
INT_LITERAL(1)
SC
RBRA
RBRA
RBRA
RBRA
IF
LPAR
IDENTIFIER(a21)
EQ
IDENTIFIER(mark)
RPAR
LBRA
IF
LPAR
IDENTIFIER(a22)
EQ
IDENTIFIER(mark)
RPAR
LBRA
IF
LPAR
IDENTIFIER(a23)
EQ
IDENTIFIER(mark)
RPAR
LBRA
IDENTIFIER(r)
ASSIGN
INT_LITERAL(1)
SC
RBRA
RBRA
RBRA
IF
LPAR
IDENTIFIER(a31)
EQ
IDENTIFIER(mark)
RPAR
LBRA
IF
LPAR
IDENTIFIER(a32)
EQ
IDENTIFIER(mark)
RPAR
LBRA
IF
LPAR
IDENTIFIER(a33)
EQ
IDENTIFIER(mark)
RPAR
LBRA
IDENTIFIER(r)
ASSIGN
INT_LITERAL(1)
SC
RBRA
RBRA
RBRA
RETURN
IDENTIFIER(r)
SC
RBRA
VOID
IDENTIFIER(main)
LPAR
RPAR
LBRA
INT
IDENTIFIER(playing)
SC
INT
IDENTIFIER(player)
SC
CHAR
IDENTIFIER(mark)
SC
CHAR
IDENTIFIER(yesno)
SC
IDENTIFIER(empty)
ASSIGN
CHAR_LITERAL( )
SC
IDENTIFIER(playing)
ASSIGN
INT_LITERAL(1)
SC
IDENTIFIER(reset)
LPAR
RPAR
SC
IDENTIFIER(printGame)
LPAR
RPAR
SC
IDENTIFIER(player)
ASSIGN
INT_LITERAL(1)
SC
WHILE
LPAR
IDENTIFIER(playing)
RPAR
LBRA
IDENTIFIER(selectmove)
LPAR
IDENTIFIER(player)
RPAR
SC
IDENTIFIER(mark)
ASSIGN
IDENTIFIER(get_mark)
LPAR
IDENTIFIER(player)
RPAR
SC
IDENTIFIER(printGame)
LPAR
RPAR
SC
IF
LPAR
IDENTIFIER(won)
LPAR
IDENTIFIER(mark)
RPAR
RPAR
LBRA
IDENTIFIER(printWinner)
LPAR
IDENTIFIER(player)
RPAR
SC
IDENTIFIER(playing)
ASSIGN
INT_LITERAL(0)
SC
RBRA
ELSE
IF
LPAR
IDENTIFIER(full)
LPAR
RPAR
EQ
INT_LITERAL(1)
RPAR
LBRA
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL(It's a draw!
)
RPAR
SC
IDENTIFIER(playing)
ASSIGN
INT_LITERAL(0)
SC
RBRA
ELSE
LBRA
IDENTIFIER(player)
ASSIGN
IDENTIFIER(switchPlayer)
LPAR
IDENTIFIER(player)
RPAR
SC
RBRA
IF
LPAR
IDENTIFIER(playing)
EQ
INT_LITERAL(0)
RPAR
LBRA
IDENTIFIER(print_s)
LPAR
LPAR
CHAR
ASTERISK
RPAR
STRING_LITERAL(Play again? (y/n)> )
RPAR
SC
IDENTIFIER(yesno)
ASSIGN
IDENTIFIER(read_c)
LPAR
RPAR
SC
IF
LPAR
IDENTIFIER(yesno)
EQ
CHAR_LITERAL(y)
RPAR
LBRA
IDENTIFIER(playing)
ASSIGN
INT_LITERAL(1)
SC
IDENTIFIER(reset)
LPAR
RPAR
SC
RBRA
ELSE
LBRA
IF
LPAR
IDENTIFIER(yesno)
EQ
CHAR_LITERAL(Y)
RPAR
LBRA
IDENTIFIER(playing)
ASSIGN
INT_LITERAL(1)
SC
IDENTIFIER(reset)
LPAR
RPAR
SC
RBRA
RBRA
RBRA
RBRA
RBRA
Lexing: pass

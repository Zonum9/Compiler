# #  comment
# () grouping
# [] optional
# *  zero or more
# +  one or more
# |  alternative

program    ::= (include)* (structdecl | vardecl | fundecl | funproto)* EOF

include    ::= "#include" STRING_LITERAL

structdecl ::= structtype "{" (vardecl)+ "}" ";"    # structure declaration

vardecl    ::= type IDENT ("[" INT_LITERAL "]")* ";" # variable declaration, (e.g. int a;), or multi-dimensional array declaration, (e.g. int a[2][5];)

fundecl    ::= type IDENT "(" params ")" block       # function declaration

funproto   ::= type IDENT "(" params ")" ";"         # function prototype

type       ::= ("int" | "char" | "void" | structtype) ("*")*
structtype ::= "struct" IDENT

params     ::= [ type IDENT ("[" INT_LITERAL "]")* ("," type IDENT ("[" INT_LITERAL "]")*)* ]

stmt       ::= block
             | "while" "(" exp ")" stmt              # while loop
             | "if" "(" exp ")" stmt ["else" stmt]   # if then else
             | "return" [exp] ";"                    # return
             | exp ";"                               # expression statement, e.g. a function call
             | "continue" ";"                        # continue
             | "break" ";"                           # break

block      ::= "{" (vardecl)* (stmt)* "}"

exp         ::=    exp      (arrayaccess | fieldaccess | funcall) pred2 | pred2
pred2       ::=    ("+" | "-" | typecast | addressof | valueat) pred2 | pred3      #unary plus and minus
pred3       ::=    pred3    ("/" | "*" | "%" ) pred4 | pred4
pred4       ::=    pred4    ("+" | "-" ) pred5 |  pred5
pred5       ::=    pred5    (">" | "<" | ">=" | "<=" ) pred6 |  pred6
pred6       ::=    pred6    ("!=" | "==" ) pred7 | pred7
pred7       ::=    pred7    "&&" pred8 | pred8
pred8       ::=    pred8    "||" pred9 | pred9
pred9       ::=    predFinal "=" pred9 | predFinal                                               #right to left
predFinal   ::=    "(" exp ")" | IDENT | INT_LITERAL | STRING_LITERAL | CHAR_LITERAL | sizeof


funcall      ::= IDENT "(" [ exp ("," exp)* ] ")" # function call
arrayaccess  ::=  "[" exp "]"                  # array access
fieldaccess  ::=  "." IDENT                    # structure field member access
valueat      ::= "*" exp                          # Value at operator (pointer indirection)
addressof    ::= "&" exp                          # Address-of operator
sizeof       ::= "sizeof" "(" type ")"            # size of type
typecast     ::= "(" type ")" exp                 # type casting


